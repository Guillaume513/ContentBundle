<?php

namespace ContentBundle\Repository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends \Doctrine\ORM\EntityRepository
{
    public function getByRubrique($id_rubrique)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.title, p.updatedAt, p.id, p.refUrl' )
            ->from('ContentBundle:Page', 'p')
            ->where('p.rubrique = :rubrique ')
            ->setParameter('rubrique', $id_rubrique)
            ->andWhere('p.isActive = :active')
            ->setParameter('active', 1)
            ->add('orderBy', 'p.id ASC');

        return $queryBuilder->getQuery()->getResult();
//        return $queryBuilder->getQuery()->execute();
    }

    public function getPageServiceExclus($id_page)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p' )
            ->from('ContentBundle:Page', 'p')
            ->where('p.rubrique = :rubrique ')
            ->setParameter('rubrique', 2)
            ->andWhere('p.isActive = :active')
            ->setParameter('active', 1)
            ->andWhere('p.id != :page')
            ->setParameter('page', $id_page)
            ->add('orderBy', 'p.id ASC');

        return $queryBuilder->getQuery()->getResult();
    }


    public function getPageServiceBandeau()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p' )
            ->from('ContentBundle:Page', 'p')
            ->where('p.rubrique = :rubrique ')
            ->setParameter('rubrique', 2)
            ->andWhere('p.isActive = :active')
            ->setParameter('active', 1)
            ->andWhere('p.id NOT IN (:page)')
            ->setParameter('page', [19,20])
            ->add('orderBy', 'p.id ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAllRub()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.title, p.updatedAt, p.id, r.title as titleRub, r.id as rub_id')
            ->from('ContentBundle:Page', 'p')
            ->innerJoin('p.rubrique', 'r', 'WITH', 'p.rubrique = r.id')
            ->andWhere('p.isActive = :active')
            ->setParameter('active', 1)
            ->add('orderBy', 'r.id ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getPage($page)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.id, p.title, p.description')
            ->from('ContentBundle:Page', 'p')
            ->where('p.id = :page ')
            ->setParameter('page', $page)
            ->andWhere('p.isActive = :active')
            ->setParameter('active', 1)
            ->add('orderBy', 'p.id ASC');

        return $queryBuilder->getQuery()->getResult();
    }
}
