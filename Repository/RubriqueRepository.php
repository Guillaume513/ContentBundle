<?php

namespace ContentBundle\Repository;

/**
 * RubriqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RubriqueRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllRubriqueBack()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('r.title', 'r.updatedAt', 'r.id', 'r.refUrl', 'r.refTitle', 'r.refSummary', 'r.refKeywords', 'r.isActive')
            ->from('ContentBundle:Rubrique', 'r')
//            ->where('r.isActive = :active')
//            ->setParameter('active', 1)
            ->add('orderBy', 'r.orderNbr, r.title, r.id', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAllPageByRubriqueBack()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.id, p.title, p.updatedAt, IDENTITY(p.rubrique) as pageRubId, p.isActive')
            ->from('ContentBundle:Page', 'p')
//            ->where('p.isActive = :active')
//            ->setParameter('active', 1)
            ->groupBy('p.id, p.title, p.rubrique, p.updatedAt')
            ->add('orderBy', 'p.orderNbr, p.title, p.id', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAllRubrique()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('r.title', 'r.updatedAt', 'r.id', 'r.refUrl', 'r.refTitle', 'r.refSummary', 'r.refKeywords')
            ->from('ContentBundle:Rubrique', 'r')
            ->where('r.isActive = :active')
            ->setParameter('active', 1)
            ->add('orderBy', 'r.orderNbr, r.title, r.id', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getRubriqueMenu()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('r.title', 'r.updatedAt', 'r.id', 'r.refUrl', 'r.refTitle', 'r.refSummary', 'r.refKeywords')
            ->from('ContentBundle:Rubrique', 'r')
            ->where('r.isActive = :active')
            ->setParameter('active', 1)
            ->andWhere('r.id not in (6)')
            ->add('orderBy', 'r.orderNbr, r.title, r.id', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }


    public function getAllPageByRubrique()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.id, p.title, p.updatedAt, IDENTITY(p.rubrique) as pageRubId')
            ->from('ContentBundle:Page', 'p')
            ->where('p.isActive = :active')
            ->setParameter('active', 1)
            ->groupBy('p.id, p.title, p.rubrique, p.updatedAt');

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAllRubByPage()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p.updatedAt as pageMaj, r.updatedAt as rubMaj, p.id, p.title as titlePage, IDENTITY(p.rubriqueId) as pageRubId, r.title as titleRub, r.id as rubId')
            ->from('ContentBundle:Page', 'p')
            ->innerJoin('p.rubrique', 'r', 'WITH', 'p.rubrique = r.id')
            ->where('p.isActive = :active')
            ->setParameter('active', 1)
            ->where('r.isActive = :activeR')
            ->setParameter('activeR', 1)
            ->add('orderBy', 'r.id, r.title, p.id, p.rubrique');

        return $queryBuilder->getQuery()->getResult();
    }


    public function getLastRub()
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('r.title, r.updatedAt, r.subtitle, r.id, IDENTITY(r.filename)')
            ->from('ContentBundle:Rubrique', 'r')
            ->where('isActive = :active')
            ->setParameter('active', 1)
            ->add('orderBy', 'r.updatedAt, r.title, r.id')
            ->setMaxResults(2);

        return $queryBuilder->getQuery()->getResult();
    }

    public function getCountRubByUser($user)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('count(r.id) as nbrRub')
            ->from('ContentBundle:Rubrique', 'r')
            ->where('r.userId = :user')
            ->setParameter('user', $user)
            ->where('isActive = :active')
            ->setParameter('active', 1);

        return $queryBuilder->getQuery()->getResult();
    }

    public function getOtherPageRub($id_rubrique, $id_page)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder
            ->select('p')
            ->from('ContentBundle:Page', 'p')
            ->where('p.isActive = :active')
            ->setParameter('active', 1)
            ->andWhere('p.rubrique = :rubrique')
            ->setParameter('rubrique', $id_rubrique)
            ->andWhere('p.id != :page')
            ->setParameter('page', $id_page)
            ->add('orderBy', 'p.updatedAt', 'DESC');

        return $queryBuilder->getQuery()->getResult();
    }
}
